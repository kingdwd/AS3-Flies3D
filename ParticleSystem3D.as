package {	import flash.geom.*;	import flash.display.*;	import flash.events.*;	import flash.utils.*;	public class ParticleSystem3D extends Sprite {		private var emitTimer:Timer;		private var starsMC:Sprite;		internal var nowTime:int;		//internal var maxLife:int= 1000;		internal var gravity:Number			= 0.0;		internal var fadeSpeed:Number		= 0.95;		internal var fadeStartTime:int		= 1000;		internal var growSpeed:Number		= 0.02;		internal var emitSpeed:Number		= 5.0;		internal var inheritSpeed:Number	= 0.6;		internal var minSize:Number			= 0.02;		internal var maxSize:Number			= 0.4;		internal var maxRotSpeed:Number		= 10;//		internal var inheritVel:Vector3D;		internal var emitter:Emitter3D;				internal var count:int;		public function ParticleSystem3D(count:int) {			emitter = new Emitter3D(this);			addChild(emitter);//			emitter.setPosition((Math.random()-0.5) * 1000, (Math.random()-0.5) * 1000, (Math.random()-0.5) * 1000);						//setFreq(freq);//			inheritVel = new Vector3D();			this.count = count;			addEventListener(Event.ENTER_FRAME, update);			addEventListener(Event.ADDED_TO_STAGE, addedToStage);		}				private function addedToStage(e:Event) {			for(var i=0; i<count; i++) emit(null);		}			/*		public function setFreq(freq:Number) {			emitTimer = new Timer(1000/freq);			emitTimer.addEventListener(TimerEvent.TIMER, emit);			startEmitter();		}				*/				private function emit(e:TimerEvent) {			var star = new Particle3D(Math.random() * stage.stageWidth, Math.random() * stage.stageHeight, Math.random() * 1000, this);			//starsMC.addChild(star);			addChild(star);		}/*		public function startEmitter() {			emitTimer.start();		}		public function stopEmitter() {			emitTimer.stop();		}*/		private function update(e:Event) {			nowTime = getTimer();			var i:int;			var n:Node3D;						for (i=0; i < numChildren; i++) {				n = getChildAt(i) as Node3D;				n.update();				n.render();			}					}	}}