/********************** A single SnowFlake, takes care of initializing and updating itself **********************/package {	import flash.utils.*		import flash.geom.ColorTransform;		public class Particle3D extends SpringyNode3D {		private var vr:Number;// rot vel		//private var age:int;		//private var birthTime:int;		//private var maxSize:Number;				private var pSystem:ParticleSystem3D;				private var targetMain:Vector3D;		public function Particle3D(tx:Number, ty:Number, tz:Number, t_pSystem:ParticleSystem3D) {			super(tx, ty, tz);			pSystem = t_pSystem;					//birthTime = getTimer();						size.x = size.y = (0.5 + Math.random() * 0.5) /Math.sqrt( Math.sqrt(pSystem.count) );			scaleX = scaleY = 0;			//maxSize = pSystem.minSize + Math.random() * (pSystem.maxSize - pSystem.minSize);						targetMain = new Vector3D( (Math.random()-0.5) * pSystem.emitter.width, (Math.random()-0.1) * pSystem.emitter.height, 0);						//targetMain = new Vector3D();						//alpha = Math.random();						vel = new Vector3D((Math.random()-0.5) * pSystem.emitSpeed, (Math.random()-0.5) * pSystem.emitSpeed, (Math.random()-0.5) * pSystem.emitSpeed);//			vel = Vector3D.add(vel, pSystem.inheritVel);			//vr = (Math.random() - 0.5) * pSystem.maxRotSpeed;// rotational velocity			//rotation = Math.random() * 360;						k += 1.5 * (Math.random() - 0.5) * k;			d += 1.5 * (Math.random() - 0.5) * d;									var ct:ColorTransform = transform.colorTransform;			ct.redMultiplier = ct.greenMultiplier = ct.blueMultiplier = Math.random() + 0.5;			transform.colorTransform = ct;		}				override public function update() {			//setTarget3(pSystem.emitter.pos.x + Math.random() * 100 - 50, pSystem.emitter.pos.y + Math.random() * 100 - 50, pSystem.emitter.pos.z + Math.random() * 100 - 50);						setTarget3(					   pSystem.emitter.pos.x + (Math.random() + Math.random())/2 * 600 - 300 + targetMain.x, 					   pSystem.emitter.pos.y + (Math.random() + Math.random())/2 * 600 - 300 + targetMain.y, 					   pSystem.emitter.pos.z + (Math.random() + Math.random())/2 * 600 - 300 + targetMain.z);						super.update();			rotation = Math.atan2(vel.y, vel.x) * 180 / Math.PI;									/*						age = pSystem.nowTime - birthTime;						vel.y += pSystem.gravity;			if(size.x < maxSize) size.x = size.y += pSystem.growSpeed;			else size.x = size.y = maxSize;						if(age > pSystem.fadeStartTime) {				alpha *= pSystem.fadeSpeed;				if(alpha<0.01) parent.removeChild(this);			}						*/			//alpha = Math.random() * 0.4 + 0.6;// set _alpha to 'a' with  randomness for flicker		}	}}